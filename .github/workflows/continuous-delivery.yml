# yaml-language-server: https://json.schemastore.org/github-workflow.json

# Continuous Delivery Example (requires manual intervention to deploy to each environment)
# Use environments to require manual approvals between jobs
# Environments require public repositories or private repositories on GitHub with Enterprise plans

name: Continuous Delivery

on: 
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  deploymentSlotName: stage
  devResourceGroup: rg-dev
  devUrl: https://dev.application.com
  prodResourceGroup: rg-prod
  prodUrl: https://application.com
  qaResourceGroup: rg-qa
  qaUrl: https://qa.application.com
  stageUrl: https://stage.application.com
  webAppName: sample-app

jobs:
  
  # Build Application
  Build:
    runs-on: ubuntu-latest

    steps:
      # Checks-out the repository under $GITHUB_WORKSPACE, so the job can access it
      - uses: actions/checkout@v2

      - name: Build Steps Here
        run: echo "Running build steps..."


  # Deploy to the Development servers
  DeployDev:
    name: Development
    if: github.event_name == 'pull_request'
    needs: Build
    runs-on: ubuntu-latest
    environment: 
      name: Development
      url: ${{ env.devUrl }}
    
    steps:
      #- uses: azure/login@v1
      #  with:
      #    creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: azure/arm-deploy@v1
        id: deployStep
        with:
          subscriptionId: ${{ secrets.SUBSCRIPTIONID }}
          resourceGroupName:  ${{ env.devResourceGroup }}
          template: /infra/azuredeploy.json
          parameters: /infra/azuredeploy.dev.parameters.json

      - name: Deployment Message
        run: echo "Deployed Application to ${{ steps.deployStep.outputs.output1 }}"


  # Deploy to the QA servers
  DeployQA:
    name: QA
    if: github.event.ref == 'refs/heads/main'
    needs: Build
    runs-on: ubuntu-latest
    environment: 
      name: QA
      url: ${{ env.qaUrl }}
    
    steps:
      - uses: azure/arm-deploy@v1
        id: deployStep
        with:
          subscriptionId: ${{ secrets.SUBSCRIPTIONID }}
          resourceGroupName:  ${{ env.qaResourceGroup }}
          template: /infra/azuredeploy.json
          parameters: /infra/azuredeploy.qa.parameters.json

      - name: Deployment Message
        run: echo "Deployed Application to ${{ steps.deployStep.outputs.output1 }}"


  # Deploy to the Staging servers
  DeployStage:
    name: Stage
    needs: DeployQA
    runs-on: ubuntu-latest
    environment: 
      name: Stage
      url: ${{ env.stageUrl }}
    
    steps:
      - name: Deploy to Stage
        run: echo "Deploy Application to Stage"

      - uses: azure/arm-deploy@v1
        id: deployStep
        with:
          subscriptionId: ${{ secrets.SUBSCRIPTIONID }}
          resourceGroupName: ${{ env.prodResourceGroup }}
          template: /infra/azuredeploy.json
          parameters: /infra/azuredeploy.stage.parameters.json

      - name: Deployment Message
        run: echo "Deployed Application to ${{ steps.deployStep.outputs.output1 }}"


  # Deploy to the Production servers
  DeployProduction:
    name: Production
    needs: DeployStage
    runs-on: ubuntu-latest
    environment: 
      name: Production
      url: ${{ env.prodUrl }}

    steps:
      - name: Deploy to Production
        run: echo "Deploy Application to Production"

      # Azure CLI command for WebApp Deployment Slot swapping
      # https://docs.microsoft.com/en-us/cli/azure/webapp/deployment/slot?view=azure-cli-latest
      - uses: azure/cli@v1
        with:
          inlineScript: |
            az webapp deployment slot swap -g ${{ env.prodResourceGroup }} -n ${{ env.webAppName }} -s ${{ env.deploymentSlotName }}
